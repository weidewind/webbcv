The plugin provides a set of tags you can use to render the fields in a form.

In the simplest case you can use _f:all_ to render a field for every property of a bean (the domain object or command the form will bind to):

{code}
<g:form…>
    <f:all bean="person"/>
</g:form>
{code}

To render individual fields you use the _f:field_ tag:

{code}
<g:form…>
    <f:field bean="person" property="name"/>
    <f:field bean="person" property="address"/>
    <f:field bean="person" property="dateOfBirth"/>
</g:form>
{code}

The _f:field_ tag will automatically handle embedded domain properties recursively:

{code}
<f:field bean="person" property="address"/>
{code}

If there is no bean object backing a form but you still want to render the surrounding field markup you can give _f:field_ a body:

{code}
<f:field property="password">
    <g:password name="password"/>
</f:field>
{code}

It should be an unusual case but to render just the input without its surrounding container you can use the _f:input_ tag:

{code}
<f:input bean="person" property="name"/>
{code}

To make it more convenient when rendering lots of properties of the same _bean_ you can use the _f:with_ tag to avoid having to specify _bean_ on any tags nested inside:

{code}
<g:form…>
    <f:with bean="person">
        <f:field property="name"/>
        <f:field property="address"/>
        <f:field property="dateOfBirth"/>
    </f:with>
</g:form>
{code}

If you need to render a property for display purposes you can use _f:display_. It will internally use _g:fieldValue_, _g:formatBoolean_ or _g:formatDate_ to format the value.

{code}
<f:display bean="person" property="name"/>
{code}

If you need to render the value in a different way you can give _f:display_ a body instead.

{code}
<f:display bean="person" property="dateOfBirth">
    <g:formatDate format="dd MMM yyyy" date="${value}"/>
</f:display>
{code}

By default _f:display_ simply renders the property value but if you supply a _\_display.gsp_ template you can render the value in some structured markup, e.g. a table cell or list item. See the [Customizing Field Rendering|guide:customizingFieldRendering] section for how to override templates. For example to render values in a definition list you could use a template like this:

{code}
<dt>${label}</dt>
<dd>${value}</dd>
{code}
